(define (fast-expt-iter b counter product)
  (cond
    ((= counter 0) product)
    ((even? counter) (fast-expt-iter (square b)
                                     (/ counter 2)
                                     product))
    (else (fast-expt-iter (square b)
                          (/ (- counter 1) 2)
                          (* product b)))))
(define (fast-expt b n) (fast-expt-iter b n 1))
